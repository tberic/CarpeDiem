con <- url("http://www.index.hr", "r")
x <- readLines(con)
head(x)
a <- available.packages()
head(rownames(a), 3)
install.packages("slidify")
install.packages("slidify")
require(devtools)
install.packages(devtools)
install.packages("devtools")
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
install.packages("KernSmooth")
library(KernSmooth)
version()
help version
?version
R.version()
a <- R.version
a
find_rtools()
lm(y - x)
traceback()
debug(lm)
lm(y-x)
install.packages("kernlab")
library(kernlab)
data(spam)
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
names(trainSpam)
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainIndicator == 0, ]
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[, 1:4] + 1))
x <- c(-0.5, 0, 1, 1, 1.5)
y <- c(0, 0, 2, 0, 0)
plot(x, y, lwd = 3, frame = FALSE, type = "l")
qbeta(0.5, 2, 1)
library(usingR)
install.packages("usingR")
install.packages("UsingR")
library(UsingR)
data(galton)
par(mfrow = c(1, 2))
hist(galton$child, col = "blue", breaks = 100)
hist(galton$parent, col = "blue", breaks = 100)
par(mfrow = c(1,1))
plot(galton$parent, galton$child, pch = 19, col = "blue")
?I
lm(I(child - mean(child)) ~ I(parent - mean(parent)) - 1, data = galton)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
??least squares
??least
?lm
x*w
sum(x*w)/4
mean(x*w)
coef(lm(galton$child ~ galton$parent))
mean(x*sqrt(w)
)
f <- function(y) sum(w*(x-y)^2)
f(1.077)
f(0.1471)
f(0.3)
f(0.0025)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
lm(x ~ y)
?lm
data(mtcars)
lm(weight ~ mpg, data = mtcars)
head(mtcars)
lm(wt ~ mpg, data = mtcars)
lm(mpg ~ wt, data = mtcars)
1.5*0.4
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
(x - mean(x))/var(x)
?var
(x - mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
lm(x ~ y)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
lm(x ~ x)
mean(x)
R.Version()
install.packages("manipulate")
install.packages("Manipulate")
library(manipulate)
manipulate(plot(1:x), x = slider(1, 100))
myHist <- function(mu) {
hist(galton$child, col = "blue", breaks = 100)
lines(c(mu, mu), c(0, 150), col = "red", lwd = 5)
mse <- mean((galton$child - mu)^2)
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(galton)
data(galton)
library(UsingR)
install.packages("UsingR")
library(manipulate)
manipulate(plot(1:x), x = slider(1, 100))
myHist <- function(mu) {
hist(galton$child, col = "blue", breaks = 100)
lines(c(mu, mu), c(0, 150), col = "red", lwd = 5)
mse <- mean((galton$child - mu)^2)
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(UsingR)
library(manipulate)
myHist <- function(mu) {
hist(galton$child, col = "blue", breaks = 100)
lines(c(mu, mu), c(0, 150), col = "red", lwd = 5)
mse <- mean((galton$child - mu)^2)
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
head(galton)
?slider
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
}
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
manipulate(plot(1:x), x = slider(5, 10))
manipulate(plot(1:x), x = slider(5, 10))
manipulate(plot(1:x), x = slider(5, 10, step = 0.5))
manipulate(plot(1:x), x = slider(5, 10))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
?slider
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
require(rCharts)
install.packages("rCharts")
require(rCharts)
library(rCharts)
require(devtools)
install.packages("devtools")
require(devtools)
install_github("rCharts", "ramnathv")
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
require(rCharts)
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
install.packages("googleVis")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400), print(M, "chart"))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M, "chart")
M
print(M)
demo(googleVis)
install.packages("RTools")
install.packages("Rzools")
install.packages("Rtools")
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='tberic', token='88B3653FAA0F191689DB9AB7E91D22D4', secret='Bv/yEOpOJNkOld23mPDApqCSIHBp+IWdfMj94JzV')
?deployApp
install_github('ropensci/plotly')
library(plotly)
load("CourseraData.rda")
load("courseraData.rda")
?RMySQL
??RMySQL
install.packages("RMySQL")
library(RMySQL)
?dbConnect
install.packages('RMySQL',type='source')
?dbConnect
library(RMySQL)
install.packages('RMySQL',type='source')
library(RMySQL)
library(RMySQL)
install.packages('RMySQL',type='source')
library(RMySQL)
install.packages(“RMySQL”, type = “source”)
install.packages("RMySQL", type = "source")
library(RMySQL)
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
library(RMySQL)
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
html <- htmlTreeParse(url, useInternalNodes = T)
install.packages("XML")
library(XML)
html <- htmlTreeParse(url, useInternalNodes = T)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes = T)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "755eabd817b7bf37649e")
myapp <- oauth_app("755eabd817b7bf37649e", "67331b5096ab4d64da7eeb60170713f7ecf47728")
?oauth_app
myapp <- oauth_app("test", "755eabd817b7bf37649e", "67331b5096ab4d64da7eeb60170713f7ecf47728")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
?oauth2.0_token
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github <- oauth_endpoints("github")
github_token <- oauth2.0_token(github, my app)
github_token <- oauth2.0_token(github, my_app)
github_token <- oauth2.0_token(github, myapp)
?httpuv
??httpuv
install.packages("libcurl")
install.packages("Rcurl")
install.packages("RCurl")
install.packages("RCurl")
library(RCurl)
github_token <- oauth2.0_token(github, myapp)
library(httr)
github_token <- oauth2.0_token(github, myapp)
?httpuv
??httpuv
install.packages("httpuv")
library(httpub)
library(httpuv)
github_token <- oauth2.0_token(github, myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
install.packages("jsonlite")
library(jsonlite)
content(req)
head(content(req))
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1, 1:4]
json2 = jsonlite::fromJSON(toJSON(json1))
head(json2)
?sqldf
??sqldf
install.packages("sqldf")
library(sqldf)
?sqldf
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
html = readLines(con)
close(con)
html
html[10]
length(html[10])
length(html[20])
nchar(html[10])
nchar(html[20])
nchar(html[30])
nchar(html[100])
?read.for
??read.for
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
?read.fortran
con <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
a <- read.fortran(con)
a <- read.fortran(con, format = c("A9", "F2.1-F1.1", "F2.1-F1.1", "F2.1-F1.1"))
?read.fwf
a <- read.fwf(con, widths=9 ,skip=4)
head(a)
a <- read.fwf(con, widths=8 ,skip=4)
a <- read.fwf(con, widths=9 ,skip=4)
close(con)
con
con <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
a <- read.fwf(con, widths=8 ,skip=4)
head(a)
a <- read.fwf(con, widths=c(10, rep(9, 4)) ,skip=4)
con <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
a <- read.fwf(con, widths=c(10, rep(9, 4)) ,skip=4)
head(a)
con <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
a <- read.fwf(con, widths=c(10, rep(4, 8)) ,skip=4)
head(a)
con <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
a <- read.fwf(con, widths=c(14, 4, 9, 4, 9, 4, 9, 4, 9) ,skip=4)
head(a)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
library(UsingT)
library(UsingR)
data(diamond)
plot(diamond$carat, diamond$price,)
plot(diamond$carat, diamond$price, bg = "lightblue", col = "black", cex = 1.1, pch = 21, frame = FALSE)
abline(lm(price ~ carat, data = diamond), lwd = 2)
y <- diamond$price
x <- diamond$carat
n <- length(y)
fit <- lm(y ~ x)
e <- resid(fit)
yhat <- predict(fit)
max(abs(e - (y - yhat)))
?resid
resid(fit(y ~ x))
resid(lm(y ~ x))
fit <- lm(y ~ x)
summary(fit)$sigma
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x)
summary(fit)$sigma
summary(fit)$coefficients
data(mtcars)
summary(mtcars)
fit <- lm(mpg ~ wt)
fit <- lm(mpg ~ wt, data = mtcars)
summary(fit)$coefficients
coeff <- summary(fit)$coefficients
coeff[2, 1] + c(-1, 1)*qt(.975, df = fit$df) * coeff[2, 2]
?mtcars
coeff
?predict
predict(fit, data.frame(wt = 3))
predict(fit, c(3), inteval=("confidence"))
predict(fit, data.frame(wt = 3), inteval=("prediction"))
?predict
install.packages("swirl")
library(swirl)
swirl()
plot(child ~ parent, galton)
plot(jitter(child, 4) ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd = 3, col = 'red')
summary(regline)
summary(regrline)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fits$coef[1]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs-rhs
all.equal(lhs, rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est())
next()
skip()
all.equal(varChild, varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(fit$residuals, attenu$mag)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor, gch_nor)
l_nor <- lm(gpa_nor ~ gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(child ~ parent, galton)
sqrt(1/(n-2)*sum(fit$residuals^2))
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child - mu)^2)
sRes <- deviance(fit)
1-sRes/sTot
summary(fit)$r.squared
cor(gaton$child, galton$parent)^2
cor(galton$child, galton$parent)^2
ppois(10, lambda = 5 * 3)
?sample
?uniform
??uniform
install_github('slidifyLibraries', 'ramnathv')
install.packages('devtools')
library(devtools)
install_github('slidifyLibraries', 'ramnathv')
setwd("D:/Dropbox/Coursera/Developing Data Products/W2")
libray(slidify)
library(slidify)
author('first_deck')
slidify('index.Rmd')
library(knitr)
browseURL('index.html')
?publish_github
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
library(shiny)
install.packages("shiny")
library(shiny)
setwd("D:/Dropbox/Coursera/Developing Data Products/P1")
setwd("D:/Dropbox/Coursera/Developing Data Products/P1/TimeLeft")
